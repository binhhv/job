<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Login extends CI_Controller {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 * 	- or -
	 * 		http://example.com/index.php/welcome/index
	 * 	- or -
	 * Since this controller is set as the default controller in
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see http://codeigniter.com/user_guide/general/urls.html
	 */
	public function __construct() {
		parent::__construct();
		$this->load->helper('security');
		$this->load->helper(array('form', 'url', 'cookie'));
		$this->load->library(array('form_validation', 'session'));
		$this->load->model('DBUtil');

	}

	public function index() {
		if (!isset($this->session->userdata['user']) || !$this->session->userdata['user']['isLogged']) {
			$csrf = array(
				'name' => $this->security->get_csrf_token_name(),
				'hash' => $this->security->get_csrf_hash(),
			);
			$this->load->view('admin/login/layout', array('titlePage' => 'ADMIN allSHIGOTO|Login', 'page' => 'allSHIGOTO', 'csrf' => $csrf));
		} else {
			if ($this->session->userdata['user']['role'] != 5 && $this->session->userdata['user']['role'] != 1) {
				redirect(base_url('error/403'));
			} else {
				redirect(base_url().'admin');
			}

		}

	}

	public function checkLogin() {
		$this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean');
		$this->form_validation->set_rules('password', 'Password', 'required');
		#Kiểm tra điều kiện validate
		$check = true;
		if ($this->form_validation->run() == TRUE) {
			$a_UserInfo['email']    = $this->security->xss_clean($this->input->post('email', true));
			$a_UserInfo['password'] = md5($this->security->xss_clean($this->input->post('password', true)));
			$autologin              = ($this->input->post('remember_me') == 'on')?1:0;
			$projection             = array('from' => 'account', 'where' => "account_email = ".$this->DBUtil->escape($a_UserInfo['email'])." AND account_password = ".$this->DBUtil->escape($a_UserInfo['password'])."");
			$a_UserChecking         = $this->DBUtil->getFromDb($projection);
			//$a_UserChecking = $this->authentication_model->a_fCheckUser( $a_UserInfo );
			if ($a_UserChecking) {
				if ($autologin == 1) {
					$cookie_name = 'siteAuth';
					$cookie_time = 3600*24*30;// 30 days.
					setcookie('ci-session', 'user='."", time()-3600);// Unset cookie of user
					setcookie($cookie_name, 'user='.$a_UserChecking[0]->account_email.'&password='.$a_UserChecking[0]->account_password.'&role='.$a_UserChecking[0]->account_map_role.'&id='.$a_UserChecking[0]->account_id, time()+$cookie_time.'$isLogged=1');
				}
				$this->session->set_userdata('user', array('id' => $a_UserChecking[0]->account_id,
						'email'                                       => $a_UserChecking[0]->account_email,
						'role'                                        => $a_UserChecking[0]->account_map_role,
						'isLogged'                                    => true));
				//var_dump($a_UserChecking[0]);
				redirect(base_url('admin'));
			} else {
				$check = false;
			}
			//$this->b_Check = false;

		} else {
			$check = false;

		}
		if (!$check) {
			$errorsMessage = 'Email or password is invalid !!!';
			$csrf          = array(
				'name' => $this->security->get_csrf_token_name(),
				'hash' => $this->security->get_csrf_hash(),
			);
			$this->load->view('admin/login/layout', array('titlePage' => 'ADMIN JOB7VN|Login', 'page' => 'job7vn', 'csrf' => $csrf, 'errors' => $errorsMessage));
		}

	}

	public function logout() {
		$this->session->sess_destroy();// Unset session of user
		$cookiename = "siteAuth";
		setcookie($cookiename, 'user='."", time()-3600);// Unset cookie of user
		redirect(base_url());
	}

}
